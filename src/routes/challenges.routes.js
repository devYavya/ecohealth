// src/routes/challenges.routes.js

import express from "express";
import {
  getChallenges,
  joinChallenge,
  leaveChallenge,
  getMyChallenges,
  generatePersonalizedChallenges,
  refreshPersonalizedChallenges,
  getApiUsageStats,
  seedDefaultChallenges,
} from "../controllers/challenges.controller.js";
import { verifyToken } from "../middlewares/auth.middleware.js";

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Challenge:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           description: Unique identifier for the challenge
 *         challengeId:
 *           type: string
 *           description: Challenge identifier
 *         name:
 *           type: string
 *           description: Challenge name
 *         description:
 *           type: string
 *           description: Challenge description
 *         startDate:
 *           type: string
 *           format: date-time
 *           description: Challenge start date
 *         endDate:
 *           type: string
 *           format: date-time
 *           description: Challenge end date
 *         pointsAwarded:
 *           type: number
 *           description: Points awarded for completing the challenge
 *         badgeAwarded:
 *           type: string
 *           description: Badge awarded for completing the challenge
 *         type:
 *           type: string
 *           description: Challenge type (diet, transport, electricity, etc.)
 *         criteria:
 *           type: object
 *           description: Specific conditions to check for challenge completion
 *     PersonalizedChallenge:
 *       type: object
 *       description: AI-generated personalized challenge with smart caching
 *       properties:
 *         challengeId:
 *           type: string
 *           description: Unique identifier for the personalized challenge
 *           example: "personalized_1643723400000_1"
 *         name:
 *           type: string
 *           description: Challenge name generated by AI
 *           example: "Reduce Car Usage Challenge"
 *         description:
 *           type: string
 *           description: Detailed description with specific goals
 *           example: "Use public transport or bike for 3 out of 5 commute days this week"
 *         type:
 *           type: string
 *           enum: [diet, transport, electricity, lifestyle]
 *           description: Challenge category
 *           example: "transport"
 *         difficulty:
 *           type: string
 *           enum: [easy, medium, hard]
 *           description: Challenge difficulty level
 *           example: "medium"
 *         duration:
 *           type: number
 *           description: Challenge duration in days
 *           example: 7
 *         pointsAwarded:
 *           type: number
 *           description: Points awarded for completion
 *           example: 35
 *         badgeAwarded:
 *           type: string
 *           description: Badge name awarded for completion
 *           example: "Eco Commuter"
 *         criteria:
 *           type: object
 *           description: Specific measurable criteria for completion
 *           example: { "publicTransportDays": 3, "carbonReduction": "15%" }
 *         tips:
 *           type: array
 *           items:
 *             type: string
 *           description: Practical tips to help complete the challenge
 *           example: ["Plan your route using transit apps", "Consider bike-sharing options"]
 *         expectedImpact:
 *           type: string
 *           description: Expected carbon footprint reduction
 *           example: "5-8 kg CO2e reduction per week"
 *         startDate:
 *           type: string
 *           format: date-time
 *           description: Challenge start date
 *         endDate:
 *           type: string
 *           format: date-time
 *           description: Challenge end date
 *         isPersonalized:
 *           type: boolean
 *           description: Indicates this is an AI-generated personalized challenge
 *           example: true
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: When the challenge was created
 *     ChallengeCache:
 *       type: object
 *       description: Cache information for personalized challenges
 *       properties:
 *         challenges:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/PersonalizedChallenge'
 *         profileHash:
 *           type: string
 *           description: Hash of user profile to detect changes
 *           example: "a1b2c3d4e5f6"
 *         carbonFootprintSnapshot:
 *           type: number
 *           description: User's carbon footprint when challenges were generated
 *           example: 148.23
 *         generatedAt:
 *           type: string
 *           format: date-time
 *           description: When challenges were generated
 *         expiresAt:
 *           type: string
 *           format: date-time
 *           description: When cache expires (2 weeks from generation)
 *         apiCallCount:
 *           type: number
 *           description: Number of API calls made for this user
 *           example: 3
 *     ApiUsageStats:
 *       type: object
 *       description: Statistics about Gemini AI usage and costs
 *       properties:
 *         totalUsers:
 *           type: number
 *           description: Total users with personalized challenges
 *           example: 150
 *         totalApiCalls:
 *           type: number
 *           description: Total Gemini API calls made
 *           example: 45
 *         averageCallsPerUser:
 *           type: number
 *           description: Average API calls per user
 *           example: 0.3
 *         estimatedMonthlyCost:
 *           type: number
 *           description: Estimated monthly cost in USD
 *           example: 0.09
 *         cacheEfficiency:
 *           type: string
 *           description: Cache hit rate percentage
 *           example: "70.0%"
 *     UserChallenge:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           description: Unique identifier for the user's challenge participation
 *         challengeId:
 *           type: string
 *           description: Challenge identifier
 *         challengeName:
 *           type: string
 *           description: Challenge name
 *         joinedAt:
 *           type: string
 *           format: date-time
 *           description: When the user joined the challenge
 *         progress:
 *           type: number
 *           description: Current progress toward completing the challenge
 *         isCompleted:
 *           type: boolean
 *           description: Whether the challenge is completed
 *         completedAt:
 *           type: string
 *           format: date-time
 *           nullable: true
 *           description: When the challenge was completed
 *         pointsEarned:
 *           type: number
 *           description: Points earned from this challenge
 *         badgeEarned:
 *           type: string
 *           nullable: true
 *           description: Badge earned from this challenge
 */

/**
 * @swagger
 * /api/challenges:
 *   get:
 *     summary: Get all available challenges
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of available challenges
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenges retrieved successfully"
 *                 challenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Challenge'
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/", verifyToken, getChallenges);

/**
 * @swagger
 * /api/challenges/generate-personalized:
 *   post:
 *     summary: Generate personalized challenges using AI
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Personalized challenges generated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Personalized challenges generated successfully"
 *                 challenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Challenge'
 *                 basedOn:
 *                   type: object
 *                   properties:
 *                     carbonFootprint:
 *                       type: number
 *                     recentLogsCount:
 *                       type: number
 *                     profileVersion:
 *                       type: string
 *       400:
 *         description: User must complete onboarding first
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
/**
 * @swagger
 * /api/challenges/generate-personalized:
 *   post:
 *     summary: Generate personalized challenges using AI with smart caching
 *     description: |
 *       Generates personalized weekly challenges based on user's onboarding profile and carbon footprint.
 *       Uses smart caching to reduce API costs:
 *       - Returns cached challenges if profile hasn't changed significantly
 *       - Only calls Gemini AI when cache is expired or profile changes >20%
 *       - Automatically falls back to static challenges if AI generation fails
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Personalized challenges generated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Personalized challenges generated successfully"
 *                 challenges:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       challengeId:
 *                         type: string
 *                         example: "personalized_1643723400000_1"
 *                       name:
 *                         type: string
 *                         example: "Plant-Based Monday Challenge"
 *                       description:
 *                         type: string
 *                         example: "Replace meat-based meals with plant alternatives every Monday"
 *                       type:
 *                         type: string
 *                         enum: [diet, transport, electricity, lifestyle]
 *                         example: "diet"
 *                       difficulty:
 *                         type: string
 *                         enum: [easy, medium, hard]
 *                         example: "medium"
 *                       duration:
 *                         type: number
 *                         example: 7
 *                       pointsAwarded:
 *                         type: number
 *                         example: 30
 *                       badgeAwarded:
 *                         type: string
 *                         example: "Plant Pioneer"
 *                       criteria:
 *                         type: object
 *                         example: { "plantBasedMeals": 4, "meatReduction": "25%" }
 *                       tips:
 *                         type: array
 *                         items:
 *                           type: string
 *                         example: ["Try lentil-based recipes", "Focus on protein-rich alternatives"]
 *                       expectedImpact:
 *                         type: string
 *                         example: "3-5 kg CO2e reduction per week"
 *                       startDate:
 *                         type: string
 *                         format: date-time
 *                       endDate:
 *                         type: string
 *                         format: date-time
 *                       isPersonalized:
 *                         type: boolean
 *                         example: true
 *                 metadata:
 *                   type: object
 *                   properties:
 *                     fromCache:
 *                       type: boolean
 *                       description: Whether challenges were retrieved from cache
 *                       example: true
 *                     cacheAge:
 *                       type: number
 *                       description: Age of cached data in milliseconds
 *                       example: 86400000
 *                     carbonFootprint:
 *                       type: number
 *                       description: User's current carbon footprint
 *                       example: 148.23
 *                     generationMethod:
 *                       type: string
 *                       enum: [cached, ai-generated, fallback]
 *                       example: "cached"
 *       400:
 *         description: User must complete onboarding first
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "User must complete onboarding before generating personalized challenges"
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error (returns fallback challenges)
 */
router.post(
  "/generate-personalized",
  verifyToken,
  generatePersonalizedChallenges
);

/**
 * @swagger
 * /api/challenges/refresh-personalized:
 *   post:
 *     summary: Force refresh personalized challenges (bypass cache)
 *     description: |
 *       Forces generation of new personalized challenges using Gemini AI, bypassing the cache.
 *       Use this when users want fresh challenges or when testing new challenge generation logic.
 *       ⚠️ This will consume API credits as it always calls Gemini AI.
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Challenges refreshed successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenges refreshed successfully"
 *                 challenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/PersonalizedChallenge'
 *                 metadata:
 *                   type: object
 *                   properties:
 *                     fromCache:
 *                       type: boolean
 *                       example: false
 *                     generationMethod:
 *                       type: string
 *                       example: "ai-generated-fresh"
 *                     carbonFootprint:
 *                       type: number
 *                       example: 148.23
 *       400:
 *         description: User must complete onboarding first
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Failed to refresh challenges
 */
router.post(
  "/refresh-personalized",
  verifyToken,
  refreshPersonalizedChallenges
);

/**
 * @swagger
 * /api/challenges/api-usage-stats:
 *   get:
 *     summary: Get AI API usage statistics and cost analysis
 *     description: |
 *       Returns comprehensive statistics about Gemini AI usage for challenge generation.
 *       Useful for monitoring costs and cache efficiency.
 *       📊 Admin endpoint for cost optimization insights.
 *     tags: [Challenges, Analytics]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: API usage statistics retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "API usage statistics retrieved"
 *                 stats:
 *                   type: object
 *                   properties:
 *                     totalUsers:
 *                       type: number
 *                       description: Total users with personalized challenges
 *                       example: 150
 *                     totalApiCalls:
 *                       type: number
 *                       description: Total Gemini API calls made
 *                       example: 45
 *                     averageCallsPerUser:
 *                       type: number
 *                       description: Average API calls per user
 *                       example: 0.3
 *                     estimatedMonthlyCost:
 *                       type: number
 *                       description: Estimated monthly cost in USD
 *                       example: 0.09
 *                     cacheEfficiency:
 *                       type: string
 *                       description: Cache hit rate percentage
 *                       example: "70.0%"
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Failed to get statistics
 */
router.get(
  "/api-usage-stats",
  verifyToken,
  getApiUsageStats
);

/**
 * @swagger
 * /api/challenges/seed-defaults:
 *   post:
 *     summary: Seed default challenges (Admin only)
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Default challenges seeded successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Default challenges seeded successfully"
 *                 challengesCreated:
 *                   type: number
 *                 challenges:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: string
 *                       name:
 *                         type: string
 *                       type:
 *                         type: string
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.post("/seed-defaults", verifyToken, seedDefaultChallenges);

/**
 * @swagger
 * /api/challenges/my-challenges:
 *   get:
 *     summary: Get user's active and completed challenges
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User's challenges retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "User challenges retrieved successfully"
 *                 activeChallenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/UserChallenge'
 *                 completedChallenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/UserChallenge'
 *                 totalChallenges:
 *                   type: number
 *                   example: 5
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/my-challenges", verifyToken, getMyChallenges);

/**
 * @swagger
 * /api/challenges/{challengeId}/join:
 *   post:
 *     summary: Join a challenge
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: challengeId
 *         required: true
 *         schema:
 *           type: string
 *         description: The challenge ID to join
 *     responses:
 *       200:
 *         description: Successfully joined challenge
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Successfully joined challenge"
 *                 challenge:
 *                   $ref: '#/components/schemas/UserChallenge'
 *       400:
 *         description: Already participating in this challenge
 *       404:
 *         description: Challenge not found
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.post("/:challengeId/join", verifyToken, joinChallenge);

/**
 * @swagger
 * /api/challenges/{challengeId}/leave:
 *   delete:
 *     summary: Leave a challenge
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: challengeId
 *         required: true
 *         schema:
 *           type: string
 *         description: The challenge ID to leave
 *     responses:
 *       200:
 *         description: Successfully left challenge
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Successfully left challenge"
 *       400:
 *         description: Cannot leave a completed challenge
 *       404:
 *         description: Not participating in this challenge
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.delete("/:challengeId/leave", verifyToken, leaveChallenge);

export default router;
