// src/routes/challenges.routes.js

import express from "express";
import {
  getChallenges,
  joinChallenge,
  leaveChallenge,
  getMyChallenges,
  generatePersonalizedChallenges,
  refreshPersonalizedChallenges,
  getApiUsageStats,
  seedDefaultChallenges,
  getChallengeStats,
  getChallengeProgress,
  getBadgesInfo,
  createChallenge,
  updateChallenge,
  deleteChallenge,
} from "../controllers/challenges.controller.js";
import { verifyToken } from "../middlewares/auth.middleware.js";
import { verifyAdmin } from "../middlewares/admin.middleware.js";

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Challenge:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           description: Unique identifier for the challenge
 *         challengeId:
 *           type: string
 *           description: Challenge identifier
 *         name:
 *           type: string
 *           description: Challenge name
 *         description:
 *           type: string
 *           description: Challenge description
 *         startDate:
 *           type: string
 *           format: date-time
 *           description: Challenge start date
 *         endDate:
 *           type: string
 *           format: date-time
 *           description: Challenge end date
 *         pointsAwarded:
 *           type: number
 *           description: Points awarded for completing the challenge
 *         badgeAwarded:
 *           type: string
 *           description: Badge awarded for completing the challenge
 *         type:
 *           type: string
 *           description: Challenge type (diet, transport, electricity, etc.)
 *         criteria:
 *           type: object
 *           description: Specific conditions to check for challenge completion
 *     PersonalizedChallenge:
 *       type: object
 *       description: AI-generated personalized challenge with smart caching
 *       properties:
 *         challengeId:
 *           type: string
 *           description: Unique identifier for the personalized challenge
 *           example: "personalized_1643723400000_1"
 *         name:
 *           type: string
 *           description: Challenge name generated by AI
 *           example: "Reduce Car Usage Challenge"
 *         description:
 *           type: string
 *           description: Detailed description with specific goals
 *           example: "Use public transport or bike for 3 out of 5 commute days this week"
 *         type:
 *           type: string
 *           enum: [diet, transport, electricity, lifestyle]
 *           description: Challenge category
 *           example: "transport"
 *         difficulty:
 *           type: string
 *           enum: [easy, medium, hard]
 *           description: Challenge difficulty level
 *           example: "medium"
 *         duration:
 *           type: number
 *           description: Challenge duration in days
 *           example: 7
 *         pointsAwarded:
 *           type: number
 *           description: Points awarded for completion
 *           example: 35
 *         badgeAwarded:
 *           type: string
 *           description: Badge name awarded for completion
 *           example: "Eco Commuter"
 *         criteria:
 *           type: object
 *           description: Specific measurable criteria for completion
 *           example: { "publicTransportDays": 3, "carbonReduction": "15%" }
 *         tips:
 *           type: array
 *           items:
 *             type: string
 *           description: Practical tips to help complete the challenge
 *           example: ["Plan your route using transit apps", "Consider bike-sharing options"]
 *         expectedImpact:
 *           type: string
 *           description: Expected carbon footprint reduction
 *           example: "5-8 kg CO2e reduction per week"
 *         startDate:
 *           type: string
 *           format: date-time
 *           description: Challenge start date
 *         endDate:
 *           type: string
 *           format: date-time
 *           description: Challenge end date
 *         isPersonalized:
 *           type: boolean
 *           description: Indicates this is an AI-generated personalized challenge
 *           example: true
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: When the challenge was created
 *     ChallengeCache:
 *       type: object
 *       description: Cache information for personalized challenges
 *       properties:
 *         challenges:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/PersonalizedChallenge'
 *         profileHash:
 *           type: string
 *           description: Hash of user profile to detect changes
 *           example: "a1b2c3d4e5f6"
 *         carbonFootprintSnapshot:
 *           type: number
 *           description: User's carbon footprint when challenges were generated
 *           example: 148.23
 *         generatedAt:
 *           type: string
 *           format: date-time
 *           description: When challenges were generated
 *         expiresAt:
 *           type: string
 *           format: date-time
 *           description: When cache expires (2 weeks from generation)
 *         apiCallCount:
 *           type: number
 *           description: Number of API calls made for this user
 *           example: 3
 *     ApiUsageStats:
 *       type: object
 *       description: Statistics about Gemini AI usage and costs
 *       properties:
 *         totalUsers:
 *           type: number
 *           description: Total users with personalized challenges
 *           example: 150
 *         totalApiCalls:
 *           type: number
 *           description: Total Gemini API calls made
 *           example: 45
 *         averageCallsPerUser:
 *           type: number
 *           description: Average API calls per user
 *           example: 0.3
 *         estimatedMonthlyCost:
 *           type: number
 *           description: Estimated monthly cost in USD
 *           example: 0.09
 *         cacheEfficiency:
 *           type: string
 *           description: Cache hit rate percentage
 *           example: "70.0%"
 *     UserChallenge:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           description: Unique identifier for the user's challenge participation
 *         challengeId:
 *           type: string
 *           description: Challenge identifier
 *         challengeName:
 *           type: string
 *           description: Challenge name
 *         joinedAt:
 *           type: string
 *           format: date-time
 *           description: When the user joined the challenge
 *         progress:
 *           type: number
 *           description: Current progress toward completing the challenge
 *         isCompleted:
 *           type: boolean
 *           description: Whether the challenge is completed
 *         completedAt:
 *           type: string
 *           format: date-time
 *           nullable: true
 *           description: When the challenge was completed
 *         pointsEarned:
 *           type: number
 *           description: Points earned from this challenge
 *         badgeEarned:
 *           type: string
 *           nullable: true
 *           description: Badge earned from this challenge
 */

/**
 * @swagger
 * /api/challenges:
 *   get:
 *     summary: Get all available challenges
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of available challenges
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenges retrieved successfully"
 *                 challenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Challenge'
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 *   post:
 *     summary: Create a new challenge (Admin only)
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - challengeId
 *               - name
 *               - description
 *               - type
 *               - pointsAwarded
 *               - badgeAwarded
 *               - criteria
 *             properties:
 *               challengeId:
 *                 type: string
 *                 description: Unique identifier for the challenge
 *                 example: "new_eco_challenge"
 *               name:
 *                 type: string
 *                 description: Challenge name
 *                 example: "Eco Challenge Week"
 *               description:
 *                 type: string
 *                 description: Challenge description
 *                 example: "A week-long challenge to reduce your carbon footprint"
 *               type:
 *                 type: string
 *                 enum: [diet, transport, electricity, lifestyle]
 *                 description: Challenge category
 *                 example: "lifestyle"
 *               difficulty:
 *                 type: string
 *                 enum: [easy, medium, hard]
 *                 description: Challenge difficulty level
 *                 example: "medium"
 *               duration:
 *                 type: number
 *                 description: Challenge duration in days
 *                 example: 7
 *               pointsAwarded:
 *                 type: number
 *                 description: Points awarded for completing the challenge
 *                 example: 50
 *               badgeAwarded:
 *                 type: string
 *                 description: Badge awarded for completing the challenge
 *                 example: "Eco Warrior"
 *               criteria:
 *                 type: object
 *                 description: Specific conditions to check for challenge completion
 *                 example: { "dailyLogging": true, "carbonReduction": 20 }
 *               isActive:
 *                 type: boolean
 *                 description: Whether the challenge is active
 *                 default: true
 *                 example: true
 *     responses:
 *       201:
 *         description: Challenge created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenge created successfully"
 *                 challenge:
 *                   $ref: '#/components/schemas/Challenge'
 *       400:
 *         description: Bad request - Invalid input or challenge already exists
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: Forbidden - Admin access required
 *       500:
 *         description: Internal server error
 */
router.get("/", verifyToken, getChallenges);
router.post("/", verifyToken, verifyAdmin, createChallenge);


/**
 * @swagger
 * /api/challenges/seed-defaults:
 *   post:
 *     summary: Seed default challenges (Admin only)
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Default challenges seeded successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Default challenges seeded successfully"
 *                 challengesCreated:
 *                   type: number
 *                 challenges:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: string
 *                       name:
 *                         type: string
 *                       type:
 *                         type: string
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.post("/seed-defaults", verifyToken, seedDefaultChallenges);

/**
 * @swagger
 * /api/challenges/my-challenges:
 *   get:
 *     summary: Get user's active and completed challenges
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User's challenges retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "User challenges retrieved successfully"
 *                 activeChallenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/UserChallenge'
 *                 completedChallenges:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/UserChallenge'
 *                 totalChallenges:
 *                   type: number
 *                   example: 5
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/my-challenges", verifyToken, getMyChallenges);

/**
 * @swagger
 * /api/challenges/stats:
 *   get:
 *     summary: Get detailed challenge statistics only
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Challenge statistics retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenge statistics retrieved successfully"
 *                 stats:
 *                   type: object
 *                   properties:
 *                     totalChallenges:
 *                       type: number
 *                       example: 5
 *                     completedChallenges:
 *                       type: number
 *                       example: 3
 *                     activeChallenges:
 *                       type: number
 *                       example: 2
 *                     completionRate:
 *                       type: string
 *                       example: "60.0%"
 *                     totalPointsFromChallenges:
 *                       type: number
 *                       example: 150
 *                     recentAchievements:
 *                       type: number
 *                       example: 2
 *                 recentAchievements:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       name:
 *                         type: string
 *                       completedAt:
 *                         type: string
 *                         format: date-time
 *                       pointsEarned:
 *                         type: number
 *                       badgeEarned:
 *                         type: string
 *                       type:
 *                         type: string
 */
router.get("/stats", verifyToken, getChallengeStats);

/**
 * @swagger
 * /api/challenges/badges:
 *   get:
 *     summary: Get all available badges and user's earned badges
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Badges information retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Badges information retrieved successfully"
 *                 summary:
 *                   type: object
 *                   properties:
 *                     totalAvailableBadges:
 *                       type: number
 *                       example: 8
 *                     earnedBadges:
 *                       type: number
 *                       example: 3
 *                     completionRate:
 *                       type: string
 *                       example: "37.5%"
 *                 availableBadges:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       name:
 *                         type: string
 *                         example: "Eco Commuter"
 *                       challengeName:
 *                         type: string
 *                         example: "Public Transport Week"
 *                       challengeType:
 *                         type: string
 *                         example: "transport"
 *                       difficulty:
 *                         type: string
 *                         example: "medium"
 *                       pointsRequired:
 *                         type: number
 *                         example: 40
 *                 earnedBadges:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       name:
 *                         type: string
 *                       challengeName:
 *                         type: string
 *                       earnedAt:
 *                         type: string
 *                         format: date-time
 *                       pointsEarned:
 *                         type: number
 *                       challengeType:
 *                         type: string
 *                 unearnedBadges:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       name:
 *                         type: string
 *                       challengeName:
 *                         type: string
 *                       challengeType:
 *                         type: string
 *                       difficulty:
 *                         type: string
 *                       pointsRequired:
 *                         type: number
 */
router.get("/badges", verifyToken, getBadgesInfo);

/**
 * @swagger
 * /api/challenges/{challengeId}/progress:
 *   get:
 *     summary: Get detailed progress for a specific challenge
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: challengeId
 *         required: true
 *         schema:
 *           type: string
 *         description: The challenge ID to get progress for
 *     responses:
 *       200:
 *         description: Challenge progress retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenge progress retrieved successfully"
 *                 challenge:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                     name:
 *                       type: string
 *                     description:
 *                       type: string
 *                     type:
 *                       type: string
 *                     difficulty:
 *                       type: string
 *                     isCompleted:
 *                       type: boolean
 *                     completedAt:
 *                       type: string
 *                       format: date-time
 *                       nullable: true
 *                     joinedAt:
 *                       type: string
 *                       format: date-time
 *                     endDate:
 *                       type: string
 *                       format: date-time
 *                 progress:
 *                   type: object
 *                   properties:
 *                     current:
 *                       type: number
 *                       example: 4
 *                     target:
 *                       type: number
 *                       example: 7
 *                     percentage:
 *                       type: string
 *                       example: "57.1%"
 *                     daysRemaining:
 *                       type: number
 *                       example: 3
 *                     lastProgressDate:
 *                       type: string
 *                       example: "2025-08-01"
 *                 rewards:
 *                   type: object
 *                   properties:
 *                     pointsAwarded:
 *                       type: number
 *                       example: 40
 *                     badgeAwarded:
 *                       type: string
 *                       example: "Eco Commuter"
 *                     pointsEarned:
 *                       type: number
 *                       example: 0
 *                     badgeEarned:
 *                       type: string
 *                       nullable: true
 *                       example: null
 *                 criteria:
 *                   type: object
 *                   example: { "publicTransport": true, "carbonReduction": 20 }
 *                 recentActivity:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       date:
 *                         type: string
 *                         example: "2025-08-01"
 *                       contributed:
 *                         type: boolean
 *                         example: true
 *       404:
 *         description: Challenge not found or user not participating
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.get("/:challengeId/progress", verifyToken, getChallengeProgress);

/**
 * @swagger
 * /api/challenges/{challengeId}:
 *   put:
 *     summary: Update an existing challenge (Admin only)
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: challengeId
 *         required: true
 *         schema:
 *           type: string
 *         description: The challenge ID to update
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: Challenge name
 *                 example: "Updated Eco Challenge Week"
 *               description:
 *                 type: string
 *                 description: Challenge description
 *                 example: "An updated week-long challenge to reduce your carbon footprint"
 *               type:
 *                 type: string
 *                 enum: [diet, transport, electricity, lifestyle]
 *                 description: Challenge category
 *                 example: "lifestyle"
 *               difficulty:
 *                 type: string
 *                 enum: [easy, medium, hard]
 *                 description: Challenge difficulty level
 *                 example: "hard"
 *               duration:
 *                 type: number
 *                 description: Challenge duration in days
 *                 example: 14
 *               pointsAwarded:
 *                 type: number
 *                 description: Points awarded for completing the challenge
 *                 example: 75
 *               badgeAwarded:
 *                 type: string
 *                 description: Badge awarded for completing the challenge
 *                 example: "Super Eco Warrior"
 *               criteria:
 *                 type: object
 *                 description: Specific conditions to check for challenge completion
 *                 example: { "dailyLogging": true, "carbonReduction": 30 }
 *               isActive:
 *                 type: boolean
 *                 description: Whether the challenge is active
 *                 example: false
 *     responses:
 *       200:
 *         description: Challenge updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenge updated successfully"
 *                 challenge:
 *                   $ref: '#/components/schemas/Challenge'
 *       400:
 *         description: Bad request - Invalid input
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: Forbidden - Admin access required
 *       404:
 *         description: Challenge not found
 *       500:
 *         description: Internal server error
 *   delete:
 *     summary: Delete a challenge (Admin only)
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: challengeId
 *         required: true
 *         schema:
 *           type: string
 *         description: The challenge ID to delete
 *     responses:
 *       200:
 *         description: Challenge deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Challenge deleted successfully"
 *                 deletedChallenge:
 *                   type: object
 *                   properties:
 *                     challengeId:
 *                       type: string
 *                     name:
 *                       type: string
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: Forbidden - Admin access required
 *       404:
 *         description: Challenge not found
 *       409:
 *         description: Conflict - Cannot delete challenge with active participants
 *       500:
 *         description: Internal server error
 */

/**
 * @swagger
 * /api/challenges/{challengeId}/join:
 *   post:
 *     summary: Join a challenge
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: challengeId
 *         required: true
 *         schema:
 *           type: string
 *         description: The challenge ID to join
 *     responses:
 *       200:
 *         description: Successfully joined challenge
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Successfully joined challenge"
 *                 challenge:
 *                   $ref: '#/components/schemas/UserChallenge'
 *       400:
 *         description: Already participating in this challenge
 *       404:
 *         description: Challenge not found
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.post("/:challengeId/join", verifyToken, joinChallenge);

/**
 * @swagger
 * /api/challenges/{challengeId}/leave:
 *   delete:
 *     summary: Leave a challenge
 *     tags: [Challenges]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: challengeId
 *         required: true
 *         schema:
 *           type: string
 *         description: The challenge ID to leave
 *     responses:
 *       200:
 *         description: Successfully left challenge
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Successfully left challenge"
 *       400:
 *         description: Cannot leave a completed challenge
 *       404:
 *         description: Not participating in this challenge
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Internal server error
 */
router.delete("/:challengeId/leave", verifyToken, leaveChallenge);

// Challenge management routes (Admin)
router.put("/:challengeId", verifyToken, verifyAdmin, updateChallenge);
router.delete("/:challengeId", verifyToken, verifyAdmin, deleteChallenge);

export default router;
